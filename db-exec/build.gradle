
plugins {
    id 'java'
    alias libs.plugins.springDependencyManagementPlugin
    alias libs.plugins.springBootPlugin
}

group = 'org.defendev'

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

repositories {
    mavenCentral()
}

bootJar {
    enabled = false
}

dependencies {
    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-security'
    testImplementation group: 'com.oracle.database.jdbc', name: 'ojdbc11'
    testImplementation "org.springframework.boot:spring-boot-starter-log4j2"
    modules {
        module("org.springframework.boot:spring-boot-starter-logging") {
            replacedBy("org.springframework.boot:spring-boot-starter-log4j2", "Use Log4j2 instead of Logback")
        }
    }
    testImplementation libs.apacheCommonsText
    testImplementation libs.flywaydb
    testImplementation libs.defendevCommonJdk
    testImplementation libs.defendevCommonFixtures
    testImplementation project(':domain-iam-api')
    testImplementation project(':domain-iam')
    testImplementation project(':domain-financial-accounting')
}


/*
Global configuration of Test tasks i intentionally skipped. In this sub-project tests
are more of on-demand, maintanence batch jobs than actual unit tests. Therefore
I don't want them to be ever run at once.

    test {
        useJUnitPlatform()
        onlyIf { false }
    }
*/

sourceSets {
    test {
        resources {
            srcDir rootDir.toString() + '/config'
        }
    }
}


tasks.register('createEasygoSysSchema', org.gradle.api.tasks.testing.Test) {
    useJUnitPlatform()
    /*
     * This is an equivalent to running from command line:
     *   ./gradlew test --tests "org.defendev.easygo.devops.dbexec.DatabaseMaintananceTest.createEasygoSysSchema"
     *
     */
    setTestNameIncludePatterns(['org.defendev.easygo.devops.dbexec.DatabaseMaintananceTest.createEasygoSysSchema'])
    outputs.upToDateWhen { false }
}

tasks.register('dropTenantSchemas', org.gradle.api.tasks.testing.Test) {
    useJUnitPlatform()
    setTestNameIncludePatterns(['org.defendev.easygo.devops.dbexec.DatabaseMaintananceTest.dropTenantSchemas'])
    outputs.upToDateWhen { false }
}

tasks.register('dropEasygoSysSchema', org.gradle.api.tasks.testing.Test) {
    useJUnitPlatform()
    setTestNameIncludePatterns(['org.defendev.easygo.devops.dbexec.DatabaseMaintananceTest.dropEasygoSysSchema'])
    outputs.upToDateWhen { false }
}

def oracleBaselineTask = tasks.register('oracleBaseline', org.gradle.api.tasks.testing.Test) {
    useJUnitPlatform()
    setTestNameIncludePatterns(['org.defendev.easygo.devops.dbmigration.FlywayMigrationTest.oracleBaseline'])
    outputs.upToDateWhen { false }
}

def oracleMigrateTask = tasks.register('oracleMigrate', org.gradle.api.tasks.testing.Test) {
    useJUnitPlatform()
    setTestNameIncludePatterns(['org.defendev.easygo.devops.dbmigration.FlywayMigrationTest.oracleMigrate'])
    outputs.upToDateWhen { false }
}
oracleMigrateTask.configure { Test task -> task.mustRunAfter(oracleBaselineTask) }

tasks.register('oracleBaselineAndMigrate', org.gradle.api.DefaultTask) {
    dependsOn oracleBaselineTask
    dependsOn oracleMigrateTask
    outputs.upToDateWhen { false }
}

tasks.register('loadFixtures', org.gradle.api.tasks.testing.Test) {
    useJUnitPlatform()
    setTestNameIncludePatterns(['org.defendev.easygo.devops.dbfixture.LoadEasygoFixturesTest.loadFixtures'])
    outputs.upToDateWhen { false }
}

